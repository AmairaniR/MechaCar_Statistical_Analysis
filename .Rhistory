library(dbplyr)
library(dplyr)
library(ggplot2)
library(jsonlite)
library(readr)
library(tidyr)
library(tidyverse)
population_table <- read.csv("used_car_data.csv", check.names = F, stringsAsFactors = F)
population_table <- read.csv('used_car_data.csv', check.names = F, stringsAsFactors = F)
setwd("~/Desktop/columbia_bootcamp/R_Analysis")
population_table <- read.csv('used_car_data.csv', check.names = F, stringsAsFactors = F)
plt <- ggplot(population_table, aes(x=log10(MilesDriven)))
plt + geom_density() #visualize distribution
plt <- ggplot(population_table, aes(x=log10(Miles_Driven)))
plt + geom_density() #visualize distribution
View(population_table)
sample_table <- population_table %>% sample_n(50) #randomly sample 50 data points
sample_table <- population_table %>% sample_n(50) #randomly sample 50 data points
plt <- ggplot(sample_table, aes(x=log10(Miles_Driven)))
plt + geom_density()
?t.test()
t.test(log10(sample_table$Miles_Driven, mu=mean(log10(population_table$Miles_Driven)))) #Compare sample v population means
t.test(log10(sample_table$Miles_Driven), mu=mean(log10(population_table$Miles_Driven))) #Compare sample v population means
sample_table2 <- population_table %>% sample_n(50)
t.test(log10(sample_table$Miles_Driven), log10(sample_table2$Miles_Driven)) #compare means of 2 samples
mpg_data <- read_csv("mpg_modified.csv")
mpg_1999 <- filter(mpg_data, year==1999)
mpg_2008 <- mpg_data %>% filter(year==2008)
t.test(mpg_1999$hwy, mpg_2008$hwy, paired = T)
?aov()
mtcars_filt <- mtcars[,c("hp", "cyl")] #filter columns from mtcars dataset
mtcars_filt$cyl <- factor(mtcars_filt$cyl) #convert numeric column to factor
aov(hp ~ cyl, data = mtcars_filt) #compare means across multiple levels
summary(aov(hp ~ cyl, data = mtcars_filt)) #compare means across multiple levels
diabetes <- read.csv(file="../Resources/diabetes.csv")
setwd("~/Desktop/columbia_bootcamp/cu-virt-data-pt-12-2021-u-b/Modules/15-Statistics_R/Wednesday/06-Evr_Fits_and_Regression/Unsolved")
diabetes <- read.csv(file="../Resources/diabetes.csv")
# Plot a scatter plot of bp vs. one year disease progression
ggplot(diabetes, aes(bp, One_Year_Disease_Progress)) + geom_point()
# Plot a scatter plot of bp vs. one year disease progression
plt <- ggplot(diabetes, aes(bp, One_Year_Disease_Progress)) + geom_point()
# Perform linear regression
plt + geom_smooth(method = "lm")
# Get the r-sqaured value.
reg <- lm(One_Year_Disease_Progress ~ bp, data = diabetes)
summary(reg)
summary(reg)$r.squared
setwd("~/Desktop/columbia_bootcamp/R_Analysis")
?cor()
head(mtcars)
plt <- ggplot(mtcars, aes(x = hp, y = qsec))
plt + geom_point()
cor(mtcars$hp, mtcars$qsec) #calculate coefficent
used_cars <- read_csv("used_car_data.csv", check.names = F, stringsAsFactors = F)
used_cars <- read.csv("used_car_data.csv", stringsAsFactors = F)
head(used_cars)
plt <- ggplot(used_cars, aes(x = Miles_Driven, y = Selling_Price))
t.test(log10(sample_table$Miles_Driven), log10(sample_table2$Miles_Driven)) #compare means of 2 samples
plt + geom_point()
cor(used_cars$Miles_Driven, used_cars$Selling_Price)
used_matrix <- as.matrix(used_cars[,c("Selling_Price", "Present_Price", "Miles_Driven")]) #convert data frame to numeric matrix
cor(used_matrix)
?lm()
lm(qsec ~ hp, mtcars) #create linear model
summary(lm(qsec ~ hp, mtcars)) #create linear model
model <- lm(qsec ~ hp, mtcars) # create linear model
yvals <- model$coefficients['hp']*mtcars$hp + model$coefficients['Intercepts'] #determine y axis values from linear model
plt <- ggplot(mtcars, aes(x = hp, y = qsec))
plt + geom_point() + geom_line(aes(y = yvals), color = "red") #scatter plot and linear line
yvals <- model$coefficients['hp']*mtcars$hp + model$coefficients['(Intercepts)'] #determine y axis values from linear model
plt + geom_point() + geom_line(aes(y = yvals), color = "red") #scatter plot and linear line
yvals <- model$coefficients['hp']*mtcars$hp + model$coefficients['(Intercept)'] #determine y axis values from linear model
plt + geom_point() + geom_line(aes(y = yvals), color = "red") #scatter plot and linear line
lm(qsec ~ mpg + disp + drat + wt + hp, data = mtcars) #generate multiple linear regression model
summary(lm(qsec ~ mpg + disp + drat + wt + hp, data = mtcars)) #generate multiple linear regression model
?chisq.test()
table(mpg$class, mpg$year) #generate contingency table
tbl <- table(mpg$class, mpg$year) #generate contingency table
chisq.test(tbl)
setwd("~/Desktop/columbia_bootcamp/MechaCar_Statistical_Analysis")
mecha_mpg <- read_csv("MechaCar_mpg")
mecha_mpg <- read_csv("MechaCar_mpg.csv")
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data = mecha_mpg)
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data = mecha_mpg))
suspension_coil_data <- read_csv("Suspension_Coil.csv")
suspension_coil_tbl <- table(suspension_coil_data)
total_summary <- summarize(suspension_coil_data$PSI)
summarize(suspension_coil_data$PSI)
summary(suspension_coil_data$PSI)
summarize(suspension_coil_data)
summary_suspension_coil_data <- summarize(suspension_coil_data)
View(summary_suspension_coil_data)
View(summary_suspension_coil_data)
summary_suspension_coil_data <- suspension_coil_data %>% summarize(Mean = mean(PSI), Median = median(PSI), Variance = var(PSI), SD = sd(PSI))
View(summary_suspension_coil_data)
total_summary <- suspension_coil_data %>% summarize(Mean = mean(PSI), Median = median(PSI), Variance = var(PSI), SD = sd(PSI))
View(total_summary)
lot_summary <- suspension_coil_data %>% group_by(Manufacturing_Lot) %>% summarize(Mean = mean(PSI), Median = median(PSI), Variance = var(PSI), SD = sd(PSI))
View(lot_summary)
View(lot_summary)
View(total_summary)
#T-tests on suspension coils
t.test(suspension_coil_data$Manufacturing_Lot, mu = 1500)
#T-tests on suspension coils
t.test(suspension_coil_data$PSI, mu = 1500)
?t.test()
t.test(suspension_coil_data$PSI, subset = Manufacturing_Lot == "Lot1", mu = 1500)
t.test(suspension_coil_data$PSI, mu = 1500, subset = Manufacturing_Lot == "Lot1")
t.test(suspension_coil_data$PSI, mu = 1500, subset = Manufacturing_Lot == "Lot2")
t.test(suspension_coil_data$PSI, mu = 1500, subset = Manufacturing_Lot == "Lot3")
#T-tests on suspension coils
t.test(x = suspension_coil_data$PSI, mu = 1500) #psi v population mean
t.test(x = suspension_coil_data$PSI, mu = 1500, subset = Manufacturing_Lot == "Lot1")
t.test(x = suspension_coil_data$PSI, mu = 1500, subset = Manufacturing_Lot == "Lot2")
t.test(x = suspension_coil_data$PSI, mu = 1500, subset = Manufacturing_Lot == "Lot3")
t.test(x = suspension_coil_data$PSI, mu = 1500, data = suspension_coil_data, subset = Manufacturing_Lot == "Lot1")
View(lot_summary)
View(total_summary)
View(total_summary)
t.test(x = total_summary$Mean, mu = 1500)
View(lot_summary)
t.test(x = lot_summary$Mean[1], mu = 1500)
